// required_flag just defines file type,
// for source file it's not required.
!required_flag("source")

// STL
#include <ios>
#include <stdstr>
#include <variables>
#include <math>
#include <tools>

#defn LOWERCASE_A 'a'
#defn UPPERCASE_A 'A'

// Some of Kalem's runtime flags
!flag("output=testikebabi")
!flag("cpp-standard=c++2a")
!flag("cpp-output=true")
!flag("cpp-sysroot=false")
!flag("hash-cache=false")

// default=clang
!flag("cpp-compiler=default")

// Its type is not boolean.
!flag("cpp-flags=false")

!include_dir("./cpplib/")
!include_dir("./")

!add_source("test")

#import <StringTools.hpp>

#include <test>

#defn TEST "Hi, preprocessor!\n"

@my_class class {
~public
    @another_my_class_function void {
        @print "Hi from my_class!\n"
        @print test_protected
        @print test_private
    }
~private
    string test_private "Hi from my_class as private member!\n"
~protected
    string test_protected "Hi from my_class as protected member!\n"
}

@my_namespace namespace {
    @test void {
        @print "Hi, from my_namespace!\n"
    }
}

@my_function void {
    @print "Hi, from Kalem function!\n"
}

@my_arguments(string name, int age) void {
    @print "Hi, "
    @print name
    @print "! | "
    @print age
    @print "\n"
}

@my_arguments_2(string name, string lastname) void {
    @print name
    @print ", "
    @print lastname
    @print "\n"
}

@main int {
    string test "[Hello, Kalem!]\n"
    int _test 10
    unsign _test_ 20
    str my_str_test "Hello str!\n"

    int {
        year 2021
        month 3
        day 13
    }


    #i16 int16_test = 16;
    #u32 uint32_test = 32;

    // Kalem does not support class declaring yet.
    #my_class myclass;

    @print "String: "
    @print test

    @print "Integer: "
    @print _test

    @print "\nUnsigned integer: "
    @print _test_
    @print "\n"

    @my_function

    @print TEST

    @my_arguments("Terry", 19)

    @my_arguments_2("Terry Wilder", "Bach")

    @my_namespace::test

    #std::cout << "I am C++ linker huh?\n";

    @print "Argc: "
    @print argc

    @print "\nargv[argc - 1]: "
    @print argv[argc-1]
    @print "\n"

    if argc == 1 {
        @print "Where's my argument, sst.\n"
    }
    elsif argc == 2 {
        @print "Long time no see, argument!\n"
    }
    els {
        @print "Nice!\n"
    }

    int i 0

    loop {
        @print "Hello, world!\n"
        ++i

        if i == 2 {
            break
        }
    }

    @print "StringTools: "
    @print stringtools::GetBetweenString(test,"[","]")
    @print "\n"

    @my_test

    @myclass.another_my_class_function

    @print my_str_test

    @print "uint32_test : "
    @print uint32_test
    @print "\n"

    @print "int16_test : "
    @print int16_test
    @print "\n"

    @print "factorial(7) : "
    @print math::factorial(7)
    @print "\n"

    @print "log2(32) : "
    @print math::binary_log2(32)
    @print "\n"

    // Base = 10 logarithm
    @print "log(32) : "
    @print math::log(32,10)

    @print "\nabs(-2021) : "
    @print math::abs(-2021)
    @print "\n"

    char {
        lowercase_a 'a'
        uppercase_b 'B'
    }

    @print "lowercase_a : a\n"
    @print "to_upper(lowercase_a) : "

    @lowercase_a=tools::toupper(lowercase_a)

    @print lowercase_a
    @print "\n"

    @print "uppercase_b : B\n"
    @print "to_lower(uppercase_b) : "

    @uppercase_b=tools::tolower(uppercase_b)

    @print uppercase_b
    @print "\n"

    @print "Character: "

    switch lowercase_a {
        ~LOWERCASE_A {
            @print "LOWERCASE_A"
            break
        }

        ~UPPERCASE_A {
            @print "UPPERCASE_A"
            break
        }

        ~default {
            @print "Undefined"
            break
        }
    }

    @print "\n"

    @ios::println("Hello,", "world!", "from ", "ios:println!")
    @ios::builtin_println("'Hello, world!' from ios::builtin_print!")

    @return 0
}